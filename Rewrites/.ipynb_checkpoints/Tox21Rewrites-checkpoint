{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# You need to specify that you want to draw the edge labels. For that you have to call networkx.drawing.nx_pylab.draw_networkx_edge_labels.\n",
    "\n",
    "# That has an argument pos, a dictionary with nodes as keys and positions as values. It is important you use the same layout for the nodes and labels, or else they will not align!\n",
    "\n",
    "# An easy way is to let networkx handle the layout, for example with spring_layout.\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import networkx as nx\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "\n",
    "\n",
    "# def str_to_ngram(n=3,x):\n",
    "    \n",
    "    \n",
    "def load_tox21_frames():\n",
    "    df = pd.read_csv(\"list_chemicals-2020-10-30-07-04-07.tsv\",header=0,sep=\"\\t\")\n",
    "    print(df.SMILES.head())\n",
    "    return df\n",
    "    \n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0                                        CC(N)=O\n",
      "1                          CC(=O)NC1=CC=C(O)C=C1\n",
      "2    CC(=O)C1=CC=C(C=C1)S(=O)(=O)NC(=O)NC1CCCCC1\n",
      "3                                           CC#N\n",
      "4                       CC(=O)C1C(=O)OC(C)=CC1=O\n",
      "Name: SMILES, dtype: object\n"
     ]
    }
   ],
   "source": [
    "src_df = load_tox21_frames()\n",
    "# src_df = expand_text_by_ngrams(ngram_size = 3, in_str_df=src_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D']\n"
     ]
    }
   ],
   "source": [
    "# String initialization \n",
    "string = src_df.loc[0].SMILES\n",
    "string = \"HELLO WORLD\"\n",
    "  \n",
    "# Defining splitting point \n",
    "n = 1\n",
    "  \n",
    "# Using list comprehension \n",
    "out = [(string[i:i+n]) for i in range(0, len(string), n)] \n",
    "  \n",
    "# Printing output \n",
    "print(out) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "nodes=sorted(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([' ', 'D', 'E', 'H', 'L', 'O', 'R', 'W'], dtype='<U1')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# u_nodes=sorted(out)\n",
    "import numpy as np \n",
    "  \n",
    "# function to get unique values \n",
    "def unique(list1): \n",
    "    x = np.array(list1) \n",
    "    return np.unique(x)\n",
    "    \n",
    "u_nodes = unique(nodes)\n",
    "u_nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11, 8)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(nodes), len(u_nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "adj_mtx = np.zeros((len(u_nodes),len(out))) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "   'H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D'\n",
    "' ' 0    0 ,  0 ,  0 ,  1,   0 ,  1,   0,   0,   0,   0\n",
    "'D' 0    0\n",
    "'E' 1    0    1    1    0\n",
    "'H' 0    1\n",
    "'L' 0    1\n",
    "'O' 0    0 \n",
    "'R' 0    0 \n",
    "'W' 0    0\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def is_colchar_adj_rowchar(rix,cix,cols,row):\n",
    "    row_ch = row[rix]\n",
    "    \n",
    "    ix_2right = cix+1 if cix+1<len(cols) else cix\n",
    "    ix_2left  = cix-1 if cix-1>0 else cix\n",
    "    return (1 if row_ch in [cols[ix_2right]] else 0 ) or (1 if row_ch in [cols[ix_2left]] else 0)\n",
    "#\n",
    "def build_graph_rectangular_mtrx(m, cols, rows):\n",
    "    for k,c in enumerate(cols):\n",
    "        for j,r in enumerate(rows):\n",
    "            m[j][k] = is_colchar_adj_rowchar(j,k,cols,rows)\n",
    "    return m\n",
    "\n",
    "def build_graph_square_adj_matrix(m, cols, rows):\n",
    "    for k,c in enumerate(cols):\n",
    "        for j,r in enumerate(rows):\n",
    "            m[j][k] = is_colchar_adj_rowchar(j,k,cols,rows)\n",
    "    return m\n",
    "# \n",
    "def smiles_str_to_adj_mtrx (sm_str):\n",
    "    out = [(string[i:i+n]) for i in range(0, len(string), n)] \n",
    "    nodes=sorted(out)\n",
    "    u_nodes = unique(nodes)\n",
    "    adj_mtx = np.zeros((len(u_nodes),len(out))) \n",
    "    build_graph_mtrx(adj_mtx, out, u_nodes)\n",
    "    return adj_mtx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-164-9ae649146b3b>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-164-9ae649146b3b>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    cix=\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "cols = out\n",
    "rows = u_nodes\n",
    "row_ch=' '\n",
    "cix=\n",
    "(1 if row_ch in [cols[cix+1]] else 0 ) or (1 if row_ch in [cols[cix-1]] else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['O', ' ', 'W']"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out[5-1:6+1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row_ch = 'E'\n",
    "(1 if row_ch in [out[0+1]] else 0 ) or (1 if row_ch in [out[0-1]] else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.],\n",
       "       [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 1.],\n",
       "       [0., 0., 0., 1., 0., 1., 1., 0., 1., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.]])"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adj_mtx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "# adj_mtx[2][0] = is_colchar_adj_rowchar(0,2,out,u_nodes)\n",
    "adj_mtx[2][0]= is_colchar_adj_rowchar(2,0,out,u_nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adj_mtx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0.],\n",
       "       [0., 0., 0.],\n",
       "       [0., 0., 0.],\n",
       "       [0., 0., 0.],\n",
       "       [0., 0., 0.]])"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.zeros((5,3)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[' ', 'D', 'E', 'H', 'L', 'L', 'L', 'O', 'O', 'R', 'W']"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean Up "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['DTXSID',\n",
       " 'PREFERRED_NAME',\n",
       " 'CASRN',\n",
       " 'INCHIKEY',\n",
       " 'IUPAC_NAME',\n",
       " 'SMILES',\n",
       " 'INCHI_STRING',\n",
       " 'MOLECULAR_FORMULA',\n",
       " 'AVERAGE_MASS',\n",
       " 'MONOISOTOPIC_MASS',\n",
       " 'DATA_SOURCES',\n",
       " 'NUMBER_OF_PUBMED_ARTICLES',\n",
       " 'PUBCHEM_DATA_SOURCES',\n",
       " 'CPDAT_COUNT']"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "src_df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "src_df= src_df[[    'DTXSID',\n",
    "     'PREFERRED_NAME',\n",
    "     'SMILES',\n",
    "     'MOLECULAR_FORMULA',\n",
    "     'AVERAGE_MASS',\n",
    "     'CPDAT_COUNT']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "src_df.loc[:,'arn_ram'] = src_df.SMILES.apply(lambda x: smiles_str_to_adj_mtrx(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DTXSID</th>\n",
       "      <th>PREFERRED_NAME</th>\n",
       "      <th>SMILES</th>\n",
       "      <th>MOLECULAR_FORMULA</th>\n",
       "      <th>AVERAGE_MASS</th>\n",
       "      <th>CPDAT_COUNT</th>\n",
       "      <th>arn_ram</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DTXSID7020005</td>\n",
       "      <td>Acetamide</td>\n",
       "      <td>CC(N)=O</td>\n",
       "      <td>C2H5NO</td>\n",
       "      <td>59.068</td>\n",
       "      <td>78</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DTXSID2020006</td>\n",
       "      <td>Acetaminophen</td>\n",
       "      <td>CC(=O)NC1=CC=C(O)C=C1</td>\n",
       "      <td>C8H9NO2</td>\n",
       "      <td>151.165</td>\n",
       "      <td>192</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DTXSID7020007</td>\n",
       "      <td>Acetohexamide</td>\n",
       "      <td>CC(=O)C1=CC=C(C=C1)S(=O)(=O)NC(=O)NC1CCCCC1</td>\n",
       "      <td>C15H20N2O4S</td>\n",
       "      <td>324.4</td>\n",
       "      <td>1</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DTXSID7020009</td>\n",
       "      <td>Acetonitrile</td>\n",
       "      <td>CC#N</td>\n",
       "      <td>C2H3N</td>\n",
       "      <td>41.053</td>\n",
       "      <td>318</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DTXSID6020014</td>\n",
       "      <td>Dehydroacetic acid</td>\n",
       "      <td>CC(=O)C1C(=O)OC(C)=CC1=O</td>\n",
       "      <td>C8H8O4</td>\n",
       "      <td>168.148</td>\n",
       "      <td>28</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          DTXSID      PREFERRED_NAME  \\\n",
       "0  DTXSID7020005           Acetamide   \n",
       "1  DTXSID2020006       Acetaminophen   \n",
       "2  DTXSID7020007       Acetohexamide   \n",
       "3  DTXSID7020009        Acetonitrile   \n",
       "4  DTXSID6020014  Dehydroacetic acid   \n",
       "\n",
       "                                        SMILES MOLECULAR_FORMULA AVERAGE_MASS  \\\n",
       "0                                      CC(N)=O            C2H5NO       59.068   \n",
       "1                        CC(=O)NC1=CC=C(O)C=C1           C8H9NO2      151.165   \n",
       "2  CC(=O)C1=CC=C(C=C1)S(=O)(=O)NC(=O)NC1CCCCC1       C15H20N2O4S        324.4   \n",
       "3                                         CC#N             C2H3N       41.053   \n",
       "4                     CC(=O)C1C(=O)OC(C)=CC1=O            C8H8O4      168.148   \n",
       "\n",
       "  CPDAT_COUNT                                            arn_ram  \n",
       "0          78  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...  \n",
       "1         192  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...  \n",
       "2           1  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...  \n",
       "3         318  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...  \n",
       "4          28  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "src_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9064, 7)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "src_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "ename": "NetworkXError",
     "evalue": "Adjacency matrix not square: nx,ny=(8, 11)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNetworkXError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-196-3215a6235c18>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msrc_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marn_ram\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mG\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_numpy_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcreate_using\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDiGraph\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mlayout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspring_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mG\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mG\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlayout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_networkx_edge_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mG\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpos\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlayout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/chm36/lib/python3.6/site-packages/networkx/convert_matrix.py\u001b[0m in \u001b[0;36mfrom_numpy_matrix\u001b[0;34m(A, parallel_edges, create_using)\u001b[0m\n\u001b[1;32m    656\u001b[0m     \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mA\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    657\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 658\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNetworkXError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Adjacency matrix not square: nx,ny={A.shape}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    659\u001b[0m     \u001b[0mdt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mA\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    660\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNetworkXError\u001b[0m: Adjacency matrix not square: nx,ny=(8, 11)"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((10, 10), (89,))"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "n = np.random.randint(10, 200)\n",
    "a = np.arange(n)\n",
    "ns = np.ceil(np.sqrt(n)).astype(int)\n",
    "s = np.zeros(ns**2)\n",
    "s[:a.size] = a\n",
    "s = s.reshape(ns,ns)\n",
    "np.shape(s), np.shape(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8, 11)"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.shape(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8, 11)"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B = np.pad(A, ((0,1), (0,0)), mode='constant', constant_values=0)\n",
    "B = np.square(A)\n",
    "np.shape(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.],\n",
       "       [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 1.],\n",
       "       [0., 0., 0., 1., 0., 1., 1., 0., 1., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.]])"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.],\n",
       "       [1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 1.],\n",
       "       [0., 0., 0., 1., 0., 1., 1., 0., 1., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.],\n",
       "       [0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def squarify(M,val):\n",
    "    (a,b)=M.shape\n",
    "    if a>b:\n",
    "        padding=((0,0),(0,a-b))\n",
    "    else:\n",
    "        padding=((0,b-a),(0,0))\n",
    "    return np.pad(M,padding,mode='constant',constant_values=val)\n",
    "\n",
    "squarify(A, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "A = src_df.arn_ram.values[0]\n",
    "sqA = squarify(A,0)\n",
    "G = nx.from_numpy_matrix(np.matrix(sqA), create_using=nx.DiGraph)\n",
    "layout = nx.spring_layout(G)\n",
    "nx.draw(G, layout)\n",
    "nx.draw_networkx_edge_labels(G, pos=layout)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def squarify_from_numpy_matrix(A):\n",
    "#     sqA = squarify(A,0)\n",
    "    \n",
    "\n",
    "src_df.loc[:,'nxgraphs'] = src_df.arn_ram.apply(lambda A: nx.from_numpy_matrix(np.matrix(squarify(A,0)), create_using=nx.DiGraph))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DTXSID</th>\n",
       "      <th>PREFERRED_NAME</th>\n",
       "      <th>SMILES</th>\n",
       "      <th>MOLECULAR_FORMULA</th>\n",
       "      <th>AVERAGE_MASS</th>\n",
       "      <th>CPDAT_COUNT</th>\n",
       "      <th>arn_ram</th>\n",
       "      <th>nxgraphs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DTXSID7020005</td>\n",
       "      <td>Acetamide</td>\n",
       "      <td>CC(N)=O</td>\n",
       "      <td>C2H5NO</td>\n",
       "      <td>59.068</td>\n",
       "      <td>78</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DTXSID2020006</td>\n",
       "      <td>Acetaminophen</td>\n",
       "      <td>CC(=O)NC1=CC=C(O)C=C1</td>\n",
       "      <td>C8H9NO2</td>\n",
       "      <td>151.165</td>\n",
       "      <td>192</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DTXSID7020007</td>\n",
       "      <td>Acetohexamide</td>\n",
       "      <td>CC(=O)C1=CC=C(C=C1)S(=O)(=O)NC(=O)NC1CCCCC1</td>\n",
       "      <td>C15H20N2O4S</td>\n",
       "      <td>324.4</td>\n",
       "      <td>1</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DTXSID7020009</td>\n",
       "      <td>Acetonitrile</td>\n",
       "      <td>CC#N</td>\n",
       "      <td>C2H3N</td>\n",
       "      <td>41.053</td>\n",
       "      <td>318</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DTXSID6020014</td>\n",
       "      <td>Dehydroacetic acid</td>\n",
       "      <td>CC(=O)C1C(=O)OC(C)=CC1=O</td>\n",
       "      <td>C8H8O4</td>\n",
       "      <td>168.148</td>\n",
       "      <td>28</td>\n",
       "      <td>[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...</td>\n",
       "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          DTXSID      PREFERRED_NAME  \\\n",
       "0  DTXSID7020005           Acetamide   \n",
       "1  DTXSID2020006       Acetaminophen   \n",
       "2  DTXSID7020007       Acetohexamide   \n",
       "3  DTXSID7020009        Acetonitrile   \n",
       "4  DTXSID6020014  Dehydroacetic acid   \n",
       "\n",
       "                                        SMILES MOLECULAR_FORMULA AVERAGE_MASS  \\\n",
       "0                                      CC(N)=O            C2H5NO       59.068   \n",
       "1                        CC(=O)NC1=CC=C(O)C=C1           C8H9NO2      151.165   \n",
       "2  CC(=O)C1=CC=C(C=C1)S(=O)(=O)NC(=O)NC1CCCCC1       C15H20N2O4S        324.4   \n",
       "3                                         CC#N             C2H3N       41.053   \n",
       "4                     CC(=O)C1C(=O)OC(C)=CC1=O            C8H8O4      168.148   \n",
       "\n",
       "  CPDAT_COUNT                                            arn_ram  \\\n",
       "0          78  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...   \n",
       "1         192  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...   \n",
       "2           1  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...   \n",
       "3         318  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...   \n",
       "4          28  [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0,...   \n",
       "\n",
       "                             nxgraphs  \n",
       "0  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  \n",
       "1  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  \n",
       "2  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  \n",
       "3  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  \n",
       "4  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  "
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "src_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9064, 8)"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "src_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "chm36",
   "language": "python",
   "name": "chm36"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
